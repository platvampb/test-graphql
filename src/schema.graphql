type Module {
  id: ID!
  caption: String!
  urlCaption: String!
  tabs: [Tab]!
  view: View!
}

interface Tab {
  id: ID!
  caption: String!
  index: Int!
}

type TabConfigurableView implements Tab {
  id: ID!
  caption: String!
  index: Int!
  objectId: ID!
}

type TabAutoGeneratedView implements Tab {
  id: ID!
  caption: String!
  index: Int!
  # configurableViewId: ID!
  # viewMode: Int
  view: View!
}

type TabDashboard implements Tab {
  id: ID!
  caption: String!
  index: Int!
  dashboardId: ID!
}

type TabLegacy implements Tab {
  id: ID!
  caption: String!
  index: Int!
  ifd: String!
  formParams: String!
  permissionSectionId: Int!
}

type TabLink implements Tab {
  id: ID!
  caption: String!
  index: Int!
  link: String!
}

type TabReport implements Tab {
  id: ID!
  caption: String!
  index: Int!
  reportId: ID!
  visualizationId: ID!
}

type View {
  id: ID!
  content: String!
}

type Object {
  id: ID!
  # basically the parts of IObject we'll need
  #properties: [Property!]!
  #relations: [Relation!]!
}

type ObjectData {
  rows: [String!]!
}

type Query {
  Application(urlCaption: String!, locale: String!): Module!
}
